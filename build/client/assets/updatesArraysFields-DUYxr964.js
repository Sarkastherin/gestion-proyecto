const v=async({fieldsArray:w,dirtyFields:l,fieldName:u,fieldsDelete:h,onUpdate:f,onInsert:m,onRemove:g})=>{const y=l[u]??[];let a=[];await Promise.all(w.map(async(r,s)=>{const o="id"in r,n=y[s]??{},p=Object.values(n).some(e=>e);if(o&&p){const t=Object.keys(n).reduce((d,c)=>(d[c]=r[c],d),{}),{error:i}=await f({id:r.id,values:t});if(i)throw new Error(i.message)}else if(!o){const{data:e,error:t}=await m(r);if(t)throw new Error(t.message);e!==null&&(a=[e,...a])}}));for(const r of h){const{error:s}=await g(r);if(s)throw new Error(s.message)}return a};export{v as u};
